// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tfoperator.proto

#ifndef PROTOBUF_tfoperator_2eproto__INCLUDED
#define PROTOBUF_tfoperator_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_tfoperator_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTFOperatorPluginTaskImpl();
void InitDefaultsTFOperatorPluginTask();
void InitDefaultsTFApplicationImpl();
void InitDefaultsTFApplication();
void InitDefaultsTFJob_ArgsEntry_DoNotUseImpl();
void InitDefaultsTFJob_ArgsEntry_DoNotUse();
void InitDefaultsTFJobImpl();
void InitDefaultsTFJob();
inline void InitDefaults() {
  InitDefaultsTFOperatorPluginTask();
  InitDefaultsTFApplication();
  InitDefaultsTFJob_ArgsEntry_DoNotUse();
  InitDefaultsTFJob();
}
}  // namespace protobuf_tfoperator_2eproto
namespace flyte {
namespace plugins {
namespace tfoperator {
class TFApplication;
class TFApplicationDefaultTypeInternal;
extern TFApplicationDefaultTypeInternal _TFApplication_default_instance_;
class TFJob;
class TFJobDefaultTypeInternal;
extern TFJobDefaultTypeInternal _TFJob_default_instance_;
class TFJob_ArgsEntry_DoNotUse;
class TFJob_ArgsEntry_DoNotUseDefaultTypeInternal;
extern TFJob_ArgsEntry_DoNotUseDefaultTypeInternal _TFJob_ArgsEntry_DoNotUse_default_instance_;
class TFOperatorPluginTask;
class TFOperatorPluginTaskDefaultTypeInternal;
extern TFOperatorPluginTaskDefaultTypeInternal _TFOperatorPluginTask_default_instance_;
}  // namespace tfoperator
}  // namespace plugins
}  // namespace flyte
namespace flyte {
namespace plugins {
namespace tfoperator {

enum TFApplication_Type {
  TFApplication_Type_PYTHON = 0,
  TFApplication_Type_TFApplication_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TFApplication_Type_TFApplication_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TFApplication_Type_IsValid(int value);
const TFApplication_Type TFApplication_Type_Type_MIN = TFApplication_Type_PYTHON;
const TFApplication_Type TFApplication_Type_Type_MAX = TFApplication_Type_PYTHON;
const int TFApplication_Type_Type_ARRAYSIZE = TFApplication_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TFApplication_Type_descriptor();
inline const ::std::string& TFApplication_Type_Name(TFApplication_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TFApplication_Type_descriptor(), value);
}
inline bool TFApplication_Type_Parse(
    const ::std::string& name, TFApplication_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TFApplication_Type>(
    TFApplication_Type_descriptor(), name, value);
}
// ===================================================================

class TFOperatorPluginTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyte.plugins.tfoperator.TFOperatorPluginTask) */ {
 public:
  TFOperatorPluginTask();
  virtual ~TFOperatorPluginTask();

  TFOperatorPluginTask(const TFOperatorPluginTask& from);

  inline TFOperatorPluginTask& operator=(const TFOperatorPluginTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TFOperatorPluginTask(TFOperatorPluginTask&& from) noexcept
    : TFOperatorPluginTask() {
    *this = ::std::move(from);
  }

  inline TFOperatorPluginTask& operator=(TFOperatorPluginTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TFOperatorPluginTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TFOperatorPluginTask* internal_default_instance() {
    return reinterpret_cast<const TFOperatorPluginTask*>(
               &_TFOperatorPluginTask_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TFOperatorPluginTask* other);
  friend void swap(TFOperatorPluginTask& a, TFOperatorPluginTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TFOperatorPluginTask* New() const PROTOBUF_FINAL { return New(NULL); }

  TFOperatorPluginTask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TFOperatorPluginTask& from);
  void MergeFrom(const TFOperatorPluginTask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TFOperatorPluginTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyte.plugins.tfoperator.TFOperatorPluginTask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_tfoperator_2eproto::TableStruct;
  friend void ::protobuf_tfoperator_2eproto::InitDefaultsTFOperatorPluginTaskImpl();
};
// -------------------------------------------------------------------

class TFApplication : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyte.plugins.tfoperator.TFApplication) */ {
 public:
  TFApplication();
  virtual ~TFApplication();

  TFApplication(const TFApplication& from);

  inline TFApplication& operator=(const TFApplication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TFApplication(TFApplication&& from) noexcept
    : TFApplication() {
    *this = ::std::move(from);
  }

  inline TFApplication& operator=(TFApplication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TFApplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TFApplication* internal_default_instance() {
    return reinterpret_cast<const TFApplication*>(
               &_TFApplication_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TFApplication* other);
  friend void swap(TFApplication& a, TFApplication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TFApplication* New() const PROTOBUF_FINAL { return New(NULL); }

  TFApplication* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TFApplication& from);
  void MergeFrom(const TFApplication& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TFApplication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TFApplication_Type Type;
  static const Type PYTHON =
    TFApplication_Type_PYTHON;
  static inline bool Type_IsValid(int value) {
    return TFApplication_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TFApplication_Type_Type_MIN;
  static const Type Type_MAX =
    TFApplication_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TFApplication_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TFApplication_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TFApplication_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TFApplication_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyte.plugins.tfoperator.TFApplication)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_tfoperator_2eproto::TableStruct;
  friend void ::protobuf_tfoperator_2eproto::InitDefaultsTFApplicationImpl();
};
// -------------------------------------------------------------------

class TFJob_ArgsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TFJob_ArgsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TFJob_ArgsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TFJob_ArgsEntry_DoNotUse();
  TFJob_ArgsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TFJob_ArgsEntry_DoNotUse& other);
  static const TFJob_ArgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TFJob_ArgsEntry_DoNotUse*>(&_TFJob_ArgsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TFJob : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyte.plugins.tfoperator.TFJob) */ {
 public:
  TFJob();
  virtual ~TFJob();

  TFJob(const TFJob& from);

  inline TFJob& operator=(const TFJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TFJob(TFJob&& from) noexcept
    : TFJob() {
    *this = ::std::move(from);
  }

  inline TFJob& operator=(TFJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TFJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TFJob* internal_default_instance() {
    return reinterpret_cast<const TFJob*>(
               &_TFJob_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TFJob* other);
  friend void swap(TFJob& a, TFJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TFJob* New() const PROTOBUF_FINAL { return New(NULL); }

  TFJob* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TFJob& from);
  void MergeFrom(const TFJob& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TFJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> args = 4;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      args() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_args();

  // string image = 2;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // string volumeClaimName = 5;
  void clear_volumeclaimname();
  static const int kVolumeClaimNameFieldNumber = 5;
  const ::std::string& volumeclaimname() const;
  void set_volumeclaimname(const ::std::string& value);
  #if LANG_CXX11
  void set_volumeclaimname(::std::string&& value);
  #endif
  void set_volumeclaimname(const char* value);
  void set_volumeclaimname(const char* value, size_t size);
  ::std::string* mutable_volumeclaimname();
  ::std::string* release_volumeclaimname();
  void set_allocated_volumeclaimname(::std::string* volumeclaimname);

  // .flyte.plugins.tfoperator.TFApplication.Type applicationType = 1;
  void clear_applicationtype();
  static const int kApplicationTypeFieldNumber = 1;
  ::flyte::plugins::tfoperator::TFApplication_Type applicationtype() const;
  void set_applicationtype(::flyte::plugins::tfoperator::TFApplication_Type value);

  // int32 replicas = 3;
  void clear_replicas();
  static const int kReplicasFieldNumber = 3;
  ::google::protobuf::int32 replicas() const;
  void set_replicas(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:flyte.plugins.tfoperator.TFJob)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      TFJob_ArgsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > args_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::google::protobuf::internal::ArenaStringPtr volumeclaimname_;
  int applicationtype_;
  ::google::protobuf::int32 replicas_;
  mutable int _cached_size_;
  friend struct ::protobuf_tfoperator_2eproto::TableStruct;
  friend void ::protobuf_tfoperator_2eproto::InitDefaultsTFJobImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TFOperatorPluginTask

// -------------------------------------------------------------------

// TFApplication

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TFJob

// .flyte.plugins.tfoperator.TFApplication.Type applicationType = 1;
inline void TFJob::clear_applicationtype() {
  applicationtype_ = 0;
}
inline ::flyte::plugins::tfoperator::TFApplication_Type TFJob::applicationtype() const {
  // @@protoc_insertion_point(field_get:flyte.plugins.tfoperator.TFJob.applicationType)
  return static_cast< ::flyte::plugins::tfoperator::TFApplication_Type >(applicationtype_);
}
inline void TFJob::set_applicationtype(::flyte::plugins::tfoperator::TFApplication_Type value) {
  
  applicationtype_ = value;
  // @@protoc_insertion_point(field_set:flyte.plugins.tfoperator.TFJob.applicationType)
}

// string image = 2;
inline void TFJob::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TFJob::image() const {
  // @@protoc_insertion_point(field_get:flyte.plugins.tfoperator.TFJob.image)
  return image_.GetNoArena();
}
inline void TFJob::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyte.plugins.tfoperator.TFJob.image)
}
#if LANG_CXX11
inline void TFJob::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyte.plugins.tfoperator.TFJob.image)
}
#endif
inline void TFJob::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyte.plugins.tfoperator.TFJob.image)
}
inline void TFJob::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyte.plugins.tfoperator.TFJob.image)
}
inline ::std::string* TFJob::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:flyte.plugins.tfoperator.TFJob.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFJob::release_image() {
  // @@protoc_insertion_point(field_release:flyte.plugins.tfoperator.TFJob.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFJob::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:flyte.plugins.tfoperator.TFJob.image)
}

// int32 replicas = 3;
inline void TFJob::clear_replicas() {
  replicas_ = 0;
}
inline ::google::protobuf::int32 TFJob::replicas() const {
  // @@protoc_insertion_point(field_get:flyte.plugins.tfoperator.TFJob.replicas)
  return replicas_;
}
inline void TFJob::set_replicas(::google::protobuf::int32 value) {
  
  replicas_ = value;
  // @@protoc_insertion_point(field_set:flyte.plugins.tfoperator.TFJob.replicas)
}

// map<string, string> args = 4;
inline int TFJob::args_size() const {
  return args_.size();
}
inline void TFJob::clear_args() {
  args_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
TFJob::args() const {
  // @@protoc_insertion_point(field_map:flyte.plugins.tfoperator.TFJob.args)
  return args_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
TFJob::mutable_args() {
  // @@protoc_insertion_point(field_mutable_map:flyte.plugins.tfoperator.TFJob.args)
  return args_.MutableMap();
}

// string volumeClaimName = 5;
inline void TFJob::clear_volumeclaimname() {
  volumeclaimname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TFJob::volumeclaimname() const {
  // @@protoc_insertion_point(field_get:flyte.plugins.tfoperator.TFJob.volumeClaimName)
  return volumeclaimname_.GetNoArena();
}
inline void TFJob::set_volumeclaimname(const ::std::string& value) {
  
  volumeclaimname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyte.plugins.tfoperator.TFJob.volumeClaimName)
}
#if LANG_CXX11
inline void TFJob::set_volumeclaimname(::std::string&& value) {
  
  volumeclaimname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyte.plugins.tfoperator.TFJob.volumeClaimName)
}
#endif
inline void TFJob::set_volumeclaimname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  volumeclaimname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyte.plugins.tfoperator.TFJob.volumeClaimName)
}
inline void TFJob::set_volumeclaimname(const char* value, size_t size) {
  
  volumeclaimname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyte.plugins.tfoperator.TFJob.volumeClaimName)
}
inline ::std::string* TFJob::mutable_volumeclaimname() {
  
  // @@protoc_insertion_point(field_mutable:flyte.plugins.tfoperator.TFJob.volumeClaimName)
  return volumeclaimname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFJob::release_volumeclaimname() {
  // @@protoc_insertion_point(field_release:flyte.plugins.tfoperator.TFJob.volumeClaimName)
  
  return volumeclaimname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFJob::set_allocated_volumeclaimname(::std::string* volumeclaimname) {
  if (volumeclaimname != NULL) {
    
  } else {
    
  }
  volumeclaimname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), volumeclaimname);
  // @@protoc_insertion_point(field_set_allocated:flyte.plugins.tfoperator.TFJob.volumeClaimName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tfoperator
}  // namespace plugins
}  // namespace flyte

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyte::plugins::tfoperator::TFApplication_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyte::plugins::tfoperator::TFApplication_Type>() {
  return ::flyte::plugins::tfoperator::TFApplication_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tfoperator_2eproto__INCLUDED
