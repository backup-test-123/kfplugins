// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tfoperator.proto

#include "tfoperator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace flyte {
namespace plugins {
namespace tfoperator {
class TFOperatorPluginTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TFOperatorPluginTask>
      _instance;
} _TFOperatorPluginTask_default_instance_;
class TFApplicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TFApplication>
      _instance;
} _TFApplication_default_instance_;
class TFJob_ArgsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TFJob_ArgsEntry_DoNotUse>
      _instance;
} _TFJob_ArgsEntry_DoNotUse_default_instance_;
class TFJobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TFJob>
      _instance;
} _TFJob_default_instance_;
}  // namespace tfoperator
}  // namespace plugins
}  // namespace flyte
namespace protobuf_tfoperator_2eproto {
void InitDefaultsTFOperatorPluginTaskImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyte::plugins::tfoperator::_TFOperatorPluginTask_default_instance_;
    new (ptr) ::flyte::plugins::tfoperator::TFOperatorPluginTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyte::plugins::tfoperator::TFOperatorPluginTask::InitAsDefaultInstance();
}

void InitDefaultsTFOperatorPluginTask() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTFOperatorPluginTaskImpl);
}

void InitDefaultsTFApplicationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyte::plugins::tfoperator::_TFApplication_default_instance_;
    new (ptr) ::flyte::plugins::tfoperator::TFApplication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyte::plugins::tfoperator::TFApplication::InitAsDefaultInstance();
}

void InitDefaultsTFApplication() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTFApplicationImpl);
}

void InitDefaultsTFJob_ArgsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::flyte::plugins::tfoperator::_TFJob_ArgsEntry_DoNotUse_default_instance_;
    new (ptr) ::flyte::plugins::tfoperator::TFJob_ArgsEntry_DoNotUse();
  }
  ::flyte::plugins::tfoperator::TFJob_ArgsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsTFJob_ArgsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTFJob_ArgsEntry_DoNotUseImpl);
}

void InitDefaultsTFJobImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tfoperator_2eproto::InitDefaultsTFJob_ArgsEntry_DoNotUse();
  {
    void* ptr = &::flyte::plugins::tfoperator::_TFJob_default_instance_;
    new (ptr) ::flyte::plugins::tfoperator::TFJob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyte::plugins::tfoperator::TFJob::InitAsDefaultInstance();
}

void InitDefaultsTFJob() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTFJobImpl);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyte::plugins::tfoperator::TFOperatorPluginTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyte::plugins::tfoperator::TFApplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyte::plugins::tfoperator::TFJob_ArgsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyte::plugins::tfoperator::TFJob_ArgsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyte::plugins::tfoperator::TFJob_ArgsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyte::plugins::tfoperator::TFJob_ArgsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyte::plugins::tfoperator::TFJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyte::plugins::tfoperator::TFJob, applicationtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyte::plugins::tfoperator::TFJob, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyte::plugins::tfoperator::TFJob, replicas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyte::plugins::tfoperator::TFJob, args_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::flyte::plugins::tfoperator::TFJob, volumeclaimname_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyte::plugins::tfoperator::TFOperatorPluginTask)},
  { 5, -1, sizeof(::flyte::plugins::tfoperator::TFApplication)},
  { 10, 17, sizeof(::flyte::plugins::tfoperator::TFJob_ArgsEntry_DoNotUse)},
  { 19, -1, sizeof(::flyte::plugins::tfoperator::TFJob)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyte::plugins::tfoperator::_TFOperatorPluginTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyte::plugins::tfoperator::_TFApplication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyte::plugins::tfoperator::_TFJob_ArgsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyte::plugins::tfoperator::_TFJob_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tfoperator.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020tfoperator.proto\022\030flyte.plugins.tfoper"
      "ator\"\026\n\024TFOperatorPluginTask\"#\n\rTFApplic"
      "ation\"\022\n\004Type\022\n\n\006PYTHON\020\000\"\356\001\n\005TFJob\022E\n\017a"
      "pplicationType\030\001 \001(\0162,.flyte.plugins.tfo"
      "perator.TFApplication.Type\022\r\n\005image\030\002 \001("
      "\t\022\020\n\010replicas\030\003 \001(\005\0227\n\004args\030\004 \003(\0132).flyt"
      "e.plugins.tfoperator.TFJob.ArgsEntry\022\027\n\017"
      "volumeClaimName\030\005 \001(\t\032+\n\tArgsEntry\022\013\n\003ke"
      "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B7Z5github.com"
      "/swiftdiaries/tfoperatorplugin/common/pr"
      "otob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 411);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tfoperator.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tfoperator_2eproto
namespace flyte {
namespace plugins {
namespace tfoperator {
const ::google::protobuf::EnumDescriptor* TFApplication_Type_descriptor() {
  protobuf_tfoperator_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tfoperator_2eproto::file_level_enum_descriptors[0];
}
bool TFApplication_Type_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TFApplication_Type TFApplication::PYTHON;
const TFApplication_Type TFApplication::Type_MIN;
const TFApplication_Type TFApplication::Type_MAX;
const int TFApplication::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TFOperatorPluginTask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFOperatorPluginTask::TFOperatorPluginTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tfoperator_2eproto::InitDefaultsTFOperatorPluginTask();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyte.plugins.tfoperator.TFOperatorPluginTask)
}
TFOperatorPluginTask::TFOperatorPluginTask(const TFOperatorPluginTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyte.plugins.tfoperator.TFOperatorPluginTask)
}

void TFOperatorPluginTask::SharedCtor() {
  _cached_size_ = 0;
}

TFOperatorPluginTask::~TFOperatorPluginTask() {
  // @@protoc_insertion_point(destructor:flyte.plugins.tfoperator.TFOperatorPluginTask)
  SharedDtor();
}

void TFOperatorPluginTask::SharedDtor() {
}

void TFOperatorPluginTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFOperatorPluginTask::descriptor() {
  ::protobuf_tfoperator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tfoperator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TFOperatorPluginTask& TFOperatorPluginTask::default_instance() {
  ::protobuf_tfoperator_2eproto::InitDefaultsTFOperatorPluginTask();
  return *internal_default_instance();
}

TFOperatorPluginTask* TFOperatorPluginTask::New(::google::protobuf::Arena* arena) const {
  TFOperatorPluginTask* n = new TFOperatorPluginTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFOperatorPluginTask::Clear() {
// @@protoc_insertion_point(message_clear_start:flyte.plugins.tfoperator.TFOperatorPluginTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool TFOperatorPluginTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyte.plugins.tfoperator.TFOperatorPluginTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyte.plugins.tfoperator.TFOperatorPluginTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyte.plugins.tfoperator.TFOperatorPluginTask)
  return false;
#undef DO_
}

void TFOperatorPluginTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyte.plugins.tfoperator.TFOperatorPluginTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyte.plugins.tfoperator.TFOperatorPluginTask)
}

::google::protobuf::uint8* TFOperatorPluginTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyte.plugins.tfoperator.TFOperatorPluginTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyte.plugins.tfoperator.TFOperatorPluginTask)
  return target;
}

size_t TFOperatorPluginTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyte.plugins.tfoperator.TFOperatorPluginTask)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFOperatorPluginTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyte.plugins.tfoperator.TFOperatorPluginTask)
  GOOGLE_DCHECK_NE(&from, this);
  const TFOperatorPluginTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFOperatorPluginTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyte.plugins.tfoperator.TFOperatorPluginTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyte.plugins.tfoperator.TFOperatorPluginTask)
    MergeFrom(*source);
  }
}

void TFOperatorPluginTask::MergeFrom(const TFOperatorPluginTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyte.plugins.tfoperator.TFOperatorPluginTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TFOperatorPluginTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyte.plugins.tfoperator.TFOperatorPluginTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFOperatorPluginTask::CopyFrom(const TFOperatorPluginTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyte.plugins.tfoperator.TFOperatorPluginTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFOperatorPluginTask::IsInitialized() const {
  return true;
}

void TFOperatorPluginTask::Swap(TFOperatorPluginTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFOperatorPluginTask::InternalSwap(TFOperatorPluginTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFOperatorPluginTask::GetMetadata() const {
  protobuf_tfoperator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tfoperator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TFApplication::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFApplication::TFApplication()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tfoperator_2eproto::InitDefaultsTFApplication();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyte.plugins.tfoperator.TFApplication)
}
TFApplication::TFApplication(const TFApplication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyte.plugins.tfoperator.TFApplication)
}

void TFApplication::SharedCtor() {
  _cached_size_ = 0;
}

TFApplication::~TFApplication() {
  // @@protoc_insertion_point(destructor:flyte.plugins.tfoperator.TFApplication)
  SharedDtor();
}

void TFApplication::SharedDtor() {
}

void TFApplication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFApplication::descriptor() {
  ::protobuf_tfoperator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tfoperator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TFApplication& TFApplication::default_instance() {
  ::protobuf_tfoperator_2eproto::InitDefaultsTFApplication();
  return *internal_default_instance();
}

TFApplication* TFApplication::New(::google::protobuf::Arena* arena) const {
  TFApplication* n = new TFApplication;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFApplication::Clear() {
// @@protoc_insertion_point(message_clear_start:flyte.plugins.tfoperator.TFApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool TFApplication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyte.plugins.tfoperator.TFApplication)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyte.plugins.tfoperator.TFApplication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyte.plugins.tfoperator.TFApplication)
  return false;
#undef DO_
}

void TFApplication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyte.plugins.tfoperator.TFApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyte.plugins.tfoperator.TFApplication)
}

::google::protobuf::uint8* TFApplication::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyte.plugins.tfoperator.TFApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyte.plugins.tfoperator.TFApplication)
  return target;
}

size_t TFApplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyte.plugins.tfoperator.TFApplication)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFApplication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyte.plugins.tfoperator.TFApplication)
  GOOGLE_DCHECK_NE(&from, this);
  const TFApplication* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFApplication>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyte.plugins.tfoperator.TFApplication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyte.plugins.tfoperator.TFApplication)
    MergeFrom(*source);
  }
}

void TFApplication::MergeFrom(const TFApplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyte.plugins.tfoperator.TFApplication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TFApplication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyte.plugins.tfoperator.TFApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFApplication::CopyFrom(const TFApplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyte.plugins.tfoperator.TFApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFApplication::IsInitialized() const {
  return true;
}

void TFApplication::Swap(TFApplication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFApplication::InternalSwap(TFApplication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFApplication::GetMetadata() const {
  protobuf_tfoperator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tfoperator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

TFJob_ArgsEntry_DoNotUse::TFJob_ArgsEntry_DoNotUse() {}
TFJob_ArgsEntry_DoNotUse::TFJob_ArgsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TFJob_ArgsEntry_DoNotUse::MergeFrom(const TFJob_ArgsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TFJob_ArgsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_tfoperator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tfoperator_2eproto::file_level_metadata[2];
}
void TFJob_ArgsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void TFJob::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFJob::kApplicationTypeFieldNumber;
const int TFJob::kImageFieldNumber;
const int TFJob::kReplicasFieldNumber;
const int TFJob::kArgsFieldNumber;
const int TFJob::kVolumeClaimNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFJob::TFJob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tfoperator_2eproto::InitDefaultsTFJob();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyte.plugins.tfoperator.TFJob)
}
TFJob::TFJob(const TFJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  args_.MergeFrom(from.args_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  volumeclaimname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.volumeclaimname().size() > 0) {
    volumeclaimname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volumeclaimname_);
  }
  ::memcpy(&applicationtype_, &from.applicationtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&replicas_) -
    reinterpret_cast<char*>(&applicationtype_)) + sizeof(replicas_));
  // @@protoc_insertion_point(copy_constructor:flyte.plugins.tfoperator.TFJob)
}

void TFJob::SharedCtor() {
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volumeclaimname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicationtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replicas_) -
      reinterpret_cast<char*>(&applicationtype_)) + sizeof(replicas_));
  _cached_size_ = 0;
}

TFJob::~TFJob() {
  // @@protoc_insertion_point(destructor:flyte.plugins.tfoperator.TFJob)
  SharedDtor();
}

void TFJob::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volumeclaimname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TFJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFJob::descriptor() {
  ::protobuf_tfoperator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tfoperator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TFJob& TFJob::default_instance() {
  ::protobuf_tfoperator_2eproto::InitDefaultsTFJob();
  return *internal_default_instance();
}

TFJob* TFJob::New(::google::protobuf::Arena* arena) const {
  TFJob* n = new TFJob;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFJob::Clear() {
// @@protoc_insertion_point(message_clear_start:flyte.plugins.tfoperator.TFJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volumeclaimname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicationtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replicas_) -
      reinterpret_cast<char*>(&applicationtype_)) + sizeof(replicas_));
  _internal_metadata_.Clear();
}

bool TFJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyte.plugins.tfoperator.TFJob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyte.plugins.tfoperator.TFApplication.Type applicationType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_applicationtype(static_cast< ::flyte::plugins::tfoperator::TFApplication_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyte.plugins.tfoperator.TFJob.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 replicas = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> args = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          TFJob_ArgsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TFJob_ArgsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&args_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyte.plugins.tfoperator.TFJob.ArgsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyte.plugins.tfoperator.TFJob.ArgsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string volumeClaimName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volumeclaimname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->volumeclaimname().data(), static_cast<int>(this->volumeclaimname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyte.plugins.tfoperator.TFJob.volumeClaimName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyte.plugins.tfoperator.TFJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyte.plugins.tfoperator.TFJob)
  return false;
#undef DO_
}

void TFJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyte.plugins.tfoperator.TFJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyte.plugins.tfoperator.TFApplication.Type applicationType = 1;
  if (this->applicationtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->applicationtype(), output);
  }

  // string image = 2;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyte.plugins.tfoperator.TFJob.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image(), output);
  }

  // int32 replicas = 3;
  if (this->replicas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->replicas(), output);
  }

  // map<string, string> args = 4;
  if (!this->args().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyte.plugins.tfoperator.TFJob.ArgsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyte.plugins.tfoperator.TFJob.ArgsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->args().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->args().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TFJob_ArgsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(args_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TFJob_ArgsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it) {
        entry.reset(args_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string volumeClaimName = 5;
  if (this->volumeclaimname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->volumeclaimname().data(), static_cast<int>(this->volumeclaimname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyte.plugins.tfoperator.TFJob.volumeClaimName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->volumeclaimname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:flyte.plugins.tfoperator.TFJob)
}

::google::protobuf::uint8* TFJob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:flyte.plugins.tfoperator.TFJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyte.plugins.tfoperator.TFApplication.Type applicationType = 1;
  if (this->applicationtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->applicationtype(), target);
  }

  // string image = 2;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyte.plugins.tfoperator.TFJob.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image(), target);
  }

  // int32 replicas = 3;
  if (this->replicas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->replicas(), target);
  }

  // map<string, string> args = 4;
  if (!this->args().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyte.plugins.tfoperator.TFJob.ArgsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyte.plugins.tfoperator.TFJob.ArgsEntry.value");
      }
    };

    if (deterministic &&
        this->args().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->args().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TFJob_ArgsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(args_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TFJob_ArgsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->args().begin();
          it != this->args().end(); ++it) {
        entry.reset(args_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string volumeClaimName = 5;
  if (this->volumeclaimname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->volumeclaimname().data(), static_cast<int>(this->volumeclaimname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyte.plugins.tfoperator.TFJob.volumeClaimName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->volumeclaimname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyte.plugins.tfoperator.TFJob)
  return target;
}

size_t TFJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyte.plugins.tfoperator.TFJob)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> args = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  {
    ::google::protobuf::scoped_ptr<TFJob_ArgsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->args().begin();
        it != this->args().end(); ++it) {
      entry.reset(args_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string image = 2;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // string volumeClaimName = 5;
  if (this->volumeclaimname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->volumeclaimname());
  }

  // .flyte.plugins.tfoperator.TFApplication.Type applicationType = 1;
  if (this->applicationtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->applicationtype());
  }

  // int32 replicas = 3;
  if (this->replicas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replicas());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyte.plugins.tfoperator.TFJob)
  GOOGLE_DCHECK_NE(&from, this);
  const TFJob* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFJob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyte.plugins.tfoperator.TFJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyte.plugins.tfoperator.TFJob)
    MergeFrom(*source);
  }
}

void TFJob::MergeFrom(const TFJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyte.plugins.tfoperator.TFJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.volumeclaimname().size() > 0) {

    volumeclaimname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.volumeclaimname_);
  }
  if (from.applicationtype() != 0) {
    set_applicationtype(from.applicationtype());
  }
  if (from.replicas() != 0) {
    set_replicas(from.replicas());
  }
}

void TFJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyte.plugins.tfoperator.TFJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFJob::CopyFrom(const TFJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyte.plugins.tfoperator.TFJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFJob::IsInitialized() const {
  return true;
}

void TFJob::Swap(TFJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFJob::InternalSwap(TFJob* other) {
  using std::swap;
  args_.Swap(&other->args_);
  image_.Swap(&other->image_);
  volumeclaimname_.Swap(&other->volumeclaimname_);
  swap(applicationtype_, other->applicationtype_);
  swap(replicas_, other->replicas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFJob::GetMetadata() const {
  protobuf_tfoperator_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tfoperator_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tfoperator
}  // namespace plugins
}  // namespace flyte

// @@protoc_insertion_point(global_scope)
