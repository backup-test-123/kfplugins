// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/tfoperator.proto

package proto // import "github.com/swiftdiaries/tfoperatorplugin/common/proto"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TFApplication_Type int32

const (
	TFApplication_PYTHON TFApplication_Type = 0
)

var TFApplication_Type_name = map[int32]string{
	0: "PYTHON",
}
var TFApplication_Type_value = map[string]int32{
	"PYTHON": 0,
}

func (x TFApplication_Type) String() string {
	return proto.EnumName(TFApplication_Type_name, int32(x))
}
func (TFApplication_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tfoperator_a723c5d5efc4ec3d, []int{1, 0}
}

// Optional Proto for TFOperatorPlugin
type TFOperatorPluginTask struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TFOperatorPluginTask) Reset()         { *m = TFOperatorPluginTask{} }
func (m *TFOperatorPluginTask) String() string { return proto.CompactTextString(m) }
func (*TFOperatorPluginTask) ProtoMessage()    {}
func (*TFOperatorPluginTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_tfoperator_a723c5d5efc4ec3d, []int{0}
}
func (m *TFOperatorPluginTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TFOperatorPluginTask.Unmarshal(m, b)
}
func (m *TFOperatorPluginTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TFOperatorPluginTask.Marshal(b, m, deterministic)
}
func (dst *TFOperatorPluginTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TFOperatorPluginTask.Merge(dst, src)
}
func (m *TFOperatorPluginTask) XXX_Size() int {
	return xxx_messageInfo_TFOperatorPluginTask.Size(m)
}
func (m *TFOperatorPluginTask) XXX_DiscardUnknown() {
	xxx_messageInfo_TFOperatorPluginTask.DiscardUnknown(m)
}

var xxx_messageInfo_TFOperatorPluginTask proto.InternalMessageInfo

type TFApplication struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TFApplication) Reset()         { *m = TFApplication{} }
func (m *TFApplication) String() string { return proto.CompactTextString(m) }
func (*TFApplication) ProtoMessage()    {}
func (*TFApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_tfoperator_a723c5d5efc4ec3d, []int{1}
}
func (m *TFApplication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TFApplication.Unmarshal(m, b)
}
func (m *TFApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TFApplication.Marshal(b, m, deterministic)
}
func (dst *TFApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TFApplication.Merge(dst, src)
}
func (m *TFApplication) XXX_Size() int {
	return xxx_messageInfo_TFApplication.Size(m)
}
func (m *TFApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_TFApplication.DiscardUnknown(m)
}

var xxx_messageInfo_TFApplication proto.InternalMessageInfo

type TFJob struct {
	ApplicationType      TFApplication_Type `protobuf:"varint,1,opt,name=applicationType,proto3,enum=flyte.plugins.tfoperator.TFApplication_Type" json:"applicationType,omitempty"`
	Image                string             `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Replicas             int32              `protobuf:"varint,3,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Args                 map[string]string  `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VolumeClaimName      string             `protobuf:"bytes,5,opt,name=volumeClaimName,proto3" json:"volumeClaimName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TFJob) Reset()         { *m = TFJob{} }
func (m *TFJob) String() string { return proto.CompactTextString(m) }
func (*TFJob) ProtoMessage()    {}
func (*TFJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_tfoperator_a723c5d5efc4ec3d, []int{2}
}
func (m *TFJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TFJob.Unmarshal(m, b)
}
func (m *TFJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TFJob.Marshal(b, m, deterministic)
}
func (dst *TFJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TFJob.Merge(dst, src)
}
func (m *TFJob) XXX_Size() int {
	return xxx_messageInfo_TFJob.Size(m)
}
func (m *TFJob) XXX_DiscardUnknown() {
	xxx_messageInfo_TFJob.DiscardUnknown(m)
}

var xxx_messageInfo_TFJob proto.InternalMessageInfo

func (m *TFJob) GetApplicationType() TFApplication_Type {
	if m != nil {
		return m.ApplicationType
	}
	return TFApplication_PYTHON
}

func (m *TFJob) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *TFJob) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *TFJob) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *TFJob) GetVolumeClaimName() string {
	if m != nil {
		return m.VolumeClaimName
	}
	return ""
}

func init() {
	proto.RegisterType((*TFOperatorPluginTask)(nil), "flyte.plugins.tfoperator.TFOperatorPluginTask")
	proto.RegisterType((*TFApplication)(nil), "flyte.plugins.tfoperator.TFApplication")
	proto.RegisterType((*TFJob)(nil), "flyte.plugins.tfoperator.TFJob")
	proto.RegisterMapType((map[string]string)(nil), "flyte.plugins.tfoperator.TFJob.ArgsEntry")
	proto.RegisterEnum("flyte.plugins.tfoperator.TFApplication_Type", TFApplication_Type_name, TFApplication_Type_value)
}

func init() { proto.RegisterFile("proto/tfoperator.proto", fileDescriptor_tfoperator_a723c5d5efc4ec3d) }

var fileDescriptor_tfoperator_a723c5d5efc4ec3d = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0xb5, 0xdb, 0x3a, 0xdc, 0x15, 0xdd, 0x08, 0x63, 0x94, 0x3d, 0x95, 0xfa, 0x52, 0x41, 0x52,
	0x98, 0xc8, 0x44, 0xf0, 0x61, 0x8a, 0x43, 0xf6, 0xb0, 0x8d, 0x52, 0x04, 0x7d, 0x4b, 0x67, 0x56,
	0xc3, 0x9a, 0xa6, 0x24, 0xe9, 0xa4, 0xdf, 0xe5, 0x0f, 0x4a, 0x33, 0xe9, 0x74, 0xa0, 0x4f, 0xc9,
	0xb9, 0xf7, 0x9c, 0x7b, 0xce, 0xe5, 0xc2, 0x20, 0x97, 0x42, 0x8b, 0x40, 0xaf, 0x45, 0x4e, 0x25,
	0xd1, 0x42, 0x62, 0x53, 0x40, 0xce, 0x3a, 0x2d, 0x35, 0xc5, 0x79, 0x5a, 0x24, 0x2c, 0x53, 0x78,
	0xdf, 0xf7, 0x06, 0xd0, 0x8f, 0xa6, 0x8b, 0x6f, 0xb4, 0x34, 0xfd, 0x88, 0xa8, 0x8d, 0x77, 0x0e,
	0xa7, 0xd1, 0x74, 0x92, 0xe7, 0x29, 0x5b, 0x11, 0xcd, 0x44, 0xe6, 0x21, 0x68, 0x45, 0x65, 0x4e,
	0x11, 0x40, 0x7b, 0xf9, 0x12, 0x3d, 0x2d, 0xe6, 0xbd, 0x23, 0xef, 0xb3, 0x01, 0x76, 0x34, 0x9d,
	0x89, 0x18, 0x3d, 0x43, 0x97, 0xec, 0xc9, 0x15, 0xd1, 0xb1, 0x5c, 0xcb, 0x3f, 0x1b, 0x5d, 0xe2,
	0xbf, 0xac, 0xf1, 0xaf, 0xf9, 0xb8, 0xd2, 0x84, 0x87, 0x43, 0x50, 0x1f, 0x6c, 0xc6, 0x49, 0x42,
	0x9d, 0x86, 0x6b, 0xf9, 0x9d, 0x70, 0x07, 0xd0, 0x10, 0x8e, 0x25, 0x35, 0x44, 0xe5, 0x34, 0x5d,
	0xcb, 0xb7, 0xc3, 0x1a, 0xa3, 0x3b, 0x68, 0x11, 0x99, 0x28, 0xa7, 0xe5, 0x36, 0xfd, 0x93, 0xd1,
	0xc5, 0x7f, 0xf6, 0x33, 0x11, 0xe3, 0x89, 0x4c, 0xd4, 0x63, 0xa6, 0x65, 0x19, 0x1a, 0x19, 0xf2,
	0xa1, 0xbb, 0x15, 0x69, 0xc1, 0xe9, 0x43, 0x4a, 0x18, 0x9f, 0x13, 0x4e, 0x1d, 0xdb, 0x58, 0x1f,
	0x96, 0x87, 0x63, 0xe8, 0xd4, 0x62, 0xd4, 0x83, 0xe6, 0x86, 0x96, 0x66, 0xe7, 0x4e, 0x58, 0x7d,
	0xab, 0xe4, 0x5b, 0x92, 0x16, 0x75, 0x72, 0x03, 0x6e, 0x1b, 0x37, 0xd6, 0xfd, 0xf8, 0xf5, 0x3a,
	0x61, 0xfa, 0xbd, 0x88, 0xf1, 0x4a, 0xf0, 0x40, 0x7d, 0xb0, 0xb5, 0x7e, 0x63, 0x44, 0x32, 0xaa,
	0x7e, 0x1c, 0x6e, 0x17, 0x38, 0x58, 0x09, 0xce, 0x45, 0x16, 0x98, 0x2b, 0xc6, 0x6d, 0xf3, 0x5c,
	0x7d, 0x05, 0x00, 0x00, 0xff, 0xff, 0x46, 0xfa, 0x19, 0x33, 0xe6, 0x01, 0x00, 0x00,
}
