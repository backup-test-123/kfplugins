// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/tfoperator.proto

package proto // import "github.com/flyteorg/kfplugins/tfoperator/common/proto"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Optional Proto for TFOperatorPlugin
type TFOperatorPluginTask struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TFOperatorPluginTask) Reset()         { *m = TFOperatorPluginTask{} }
func (m *TFOperatorPluginTask) String() string { return proto.CompactTextString(m) }
func (*TFOperatorPluginTask) ProtoMessage()    {}
func (*TFOperatorPluginTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_tfoperator_d6cdf2a24dc42809, []int{0}
}
func (m *TFOperatorPluginTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TFOperatorPluginTask.Unmarshal(m, b)
}
func (m *TFOperatorPluginTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TFOperatorPluginTask.Marshal(b, m, deterministic)
}
func (dst *TFOperatorPluginTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TFOperatorPluginTask.Merge(dst, src)
}
func (m *TFOperatorPluginTask) XXX_Size() int {
	return xxx_messageInfo_TFOperatorPluginTask.Size(m)
}
func (m *TFOperatorPluginTask) XXX_DiscardUnknown() {
	xxx_messageInfo_TFOperatorPluginTask.DiscardUnknown(m)
}

var xxx_messageInfo_TFOperatorPluginTask proto.InternalMessageInfo

// TODO(swiftdiaries):: add resource (CPUs, Memory) requirements and accelerator (GPU) requirements
type TFJob struct {
	Image                string            `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	NumPs                int32             `protobuf:"varint,2,opt,name=num_ps,json=numPs,proto3" json:"num_ps,omitempty"`
	Replicas             int32             `protobuf:"varint,3,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Command              string            `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	Args                 map[string]string `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VolumeClaimName      string            `protobuf:"bytes,6,opt,name=volumeClaimName,proto3" json:"volumeClaimName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TFJob) Reset()         { *m = TFJob{} }
func (m *TFJob) String() string { return proto.CompactTextString(m) }
func (*TFJob) ProtoMessage()    {}
func (*TFJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_tfoperator_d6cdf2a24dc42809, []int{1}
}
func (m *TFJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TFJob.Unmarshal(m, b)
}
func (m *TFJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TFJob.Marshal(b, m, deterministic)
}
func (dst *TFJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TFJob.Merge(dst, src)
}
func (m *TFJob) XXX_Size() int {
	return xxx_messageInfo_TFJob.Size(m)
}
func (m *TFJob) XXX_DiscardUnknown() {
	xxx_messageInfo_TFJob.DiscardUnknown(m)
}

var xxx_messageInfo_TFJob proto.InternalMessageInfo

func (m *TFJob) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *TFJob) GetNumPs() int32 {
	if m != nil {
		return m.NumPs
	}
	return 0
}

func (m *TFJob) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *TFJob) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *TFJob) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *TFJob) GetVolumeClaimName() string {
	if m != nil {
		return m.VolumeClaimName
	}
	return ""
}

func init() {
	proto.RegisterType((*TFOperatorPluginTask)(nil), "flyte.plugins.tfoperator.TFOperatorPluginTask")
	proto.RegisterType((*TFJob)(nil), "flyte.plugins.tfoperator.TFJob")
	proto.RegisterMapType((map[string]string)(nil), "flyte.plugins.tfoperator.TFJob.ArgsEntry")
}

func init() { proto.RegisterFile("proto/tfoperator.proto", fileDescriptor_tfoperator_d6cdf2a24dc42809) }

var fileDescriptor_tfoperator_d6cdf2a24dc42809 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x4f, 0x4b, 0xfb, 0x30,
	0x1c, 0xc6, 0xe9, 0xb6, 0xf6, 0xf7, 0x6b, 0x3c, 0x28, 0x61, 0x8e, 0xb0, 0x53, 0xd9, 0xa9, 0x5e,
	0x52, 0x50, 0x64, 0x22, 0x78, 0x50, 0x71, 0x07, 0x0f, 0x3a, 0x4a, 0x4f, 0x5e, 0x24, 0xad, 0x69,
	0x2c, 0xcd, 0x9f, 0x92, 0x3f, 0x83, 0xbe, 0x07, 0x5f, 0xb4, 0x34, 0xab, 0x53, 0x04, 0x4f, 0xc9,
	0xe7, 0xfb, 0xf0, 0x4d, 0x9e, 0xe7, 0x01, 0x8b, 0x4e, 0x2b, 0xab, 0x32, 0x5b, 0xab, 0x8e, 0x6a,
	0x62, 0x95, 0xc6, 0x7e, 0x00, 0x51, 0xcd, 0x7b, 0x4b, 0x71, 0xc7, 0x1d, 0x6b, 0xa4, 0xc1, 0xdf,
	0xfa, 0x6a, 0x01, 0xe6, 0xc5, 0xe6, 0x79, 0xa4, 0xad, 0xd7, 0x0b, 0x62, 0xda, 0xd5, 0xc7, 0x04,
	0x84, 0xc5, 0xe6, 0x51, 0x95, 0x70, 0x0e, 0xc2, 0x46, 0x10, 0x46, 0x51, 0x90, 0x04, 0x69, 0x9c,
	0xef, 0x01, 0x9e, 0x82, 0x48, 0x3a, 0xf1, 0xda, 0x19, 0x34, 0x49, 0x82, 0x34, 0xcc, 0x43, 0xe9,
	0xc4, 0xd6, 0xc0, 0x25, 0xf8, 0xaf, 0x69, 0xc7, 0x9b, 0x8a, 0x18, 0x34, 0xf5, 0xc2, 0x81, 0x21,
	0x02, 0xff, 0x2a, 0x25, 0x04, 0x91, 0x6f, 0x68, 0xe6, 0x9f, 0xfa, 0x42, 0x78, 0x03, 0x66, 0x44,
	0x33, 0x83, 0xc2, 0x64, 0x9a, 0x1e, 0x9d, 0x9f, 0xe1, 0xbf, 0xdc, 0x62, 0xef, 0x08, 0xdf, 0x6a,
	0x66, 0x1e, 0xa4, 0xd5, 0x7d, 0xee, 0xd7, 0x60, 0x0a, 0x8e, 0x77, 0x8a, 0x3b, 0x41, 0xef, 0x39,
	0x69, 0xc4, 0x13, 0x11, 0x14, 0x45, 0xfe, 0x83, 0xdf, 0xe3, 0xe5, 0x1a, 0xc4, 0x87, 0x65, 0x78,
	0x02, 0xa6, 0x2d, 0xed, 0xc7, 0x58, 0xc3, 0x75, 0x88, 0xba, 0x23, 0xdc, 0x51, 0x9f, 0x29, 0xce,
	0xf7, 0x70, 0x3d, 0xb9, 0x0a, 0xee, 0xd6, 0x2f, 0x97, 0xac, 0xb1, 0xef, 0xae, 0xc4, 0x95, 0x12,
	0x99, 0xf7, 0xa7, 0x34, 0xcb, 0xda, 0x7a, 0x34, 0xf9, 0xa3, 0xf2, 0x6c, 0x48, 0xa5, 0x64, 0xe6,
	0x9b, 0x2f, 0x23, 0x7f, 0x5c, 0x7c, 0x06, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x6f, 0x03, 0x76, 0x9a,
	0x01, 0x00, 0x00,
}
